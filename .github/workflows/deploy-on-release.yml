name: Deploy on Release

on:
  release:
    types: [published]

jobs:
  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    
    services:
      # Setup Redis service container for location and match service tests
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      # Setup NATS service container for messaging tests
      nats:
        image: nats:2.9.15
        ports:
          - 4222:4222

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
          cache: true

      - name: Install dependencies
        run: go mod download
          
      # Create a test wrapper that modifies the NATS URLs and handles embedded test server conflicts
      - name: Create test wrapper
        run: |
          cat > test_wrapper.sh << 'EOF'
          #!/bin/bash
          set -e

          # Replace hardcoded NATS URLs in test files
          find . -name "*_test.go" -type f -exec grep -l "testNatsURL" {} \; | while read file; do
            sed -i 's|var testNatsURL = "nats://127.0.0.1:8369"|var testNatsURL = "nats://localhost:4222"|g' "$file"
          done

          # Temporarily disable embedded NATS servers in TestMain functions to use external NATS container
          find . -name "*_test.go" -type f -exec grep -l "nats-server/test" {} \; | while read file; do
            sed -i 's|testNatsServer := natsserver.RunServer(&opts)|// Disabled embedded NATS server to avoid port conflicts in CI\n\t// testNatsServer := natsserver.RunServer(&opts)|g' "$file"
            sed -i 's|testNatsServer.Shutdown()|// testNatsServer.Shutdown()|g' "$file"
          done

          # Run the tests with coverage
          go test ./... -race -coverprofile=coverage.txt -covermode=atomic
          EOF
          
          chmod +x test_wrapper.sh

      - name: Run tests
        run: ./test_wrapper.sh
        
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Build services
        run: |
          go build -o ./bin/users-service ./cmd/users
          go build -o ./bin/location-service ./cmd/location
          go build -o ./bin/match-service ./cmd/match
          go build -o ./bin/rides-service ./cmd/rides
      
      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: service-binaries
          path: ./bin/
          retention-days: 1

  build-docker-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Get release version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        
      - name: Set build timestamp
        id: build_timestamp
        run: echo "BUILD_TIME=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
        
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Build and push Users Service
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./cmd/users/Dockerfile
          push: true
          build-args: |
            VERSION=${{ steps.get_version.outputs.VERSION }}
            GIT_COMMIT=${{ github.sha }}
            BUILD_TIME=${{ steps.build_timestamp.outputs.BUILD_TIME }}
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/nebengjek-users:latest
            ${{ secrets.DOCKER_USERNAME }}/nebengjek-users:${{ steps.get_version.outputs.VERSION }}
            
      - name: Build and push Location Service
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./cmd/location/Dockerfile
          push: true
          build-args: |
            VERSION=${{ steps.get_version.outputs.VERSION }}
            GIT_COMMIT=${{ github.sha }}
            BUILD_TIME=${{ steps.build_timestamp.outputs.BUILD_TIME }}
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/nebengjek-location:latest
            ${{ secrets.DOCKER_USERNAME }}/nebengjek-location:${{ steps.get_version.outputs.VERSION }}
            
      - name: Build and push Match Service
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./cmd/match/Dockerfile
          push: true
          build-args: |
            VERSION=${{ steps.get_version.outputs.VERSION }}
            GIT_COMMIT=${{ github.sha }}
            BUILD_TIME=${{ steps.build_timestamp.outputs.BUILD_TIME }}
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/nebengjek-match:latest
            ${{ secrets.DOCKER_USERNAME }}/nebengjek-match:${{ steps.get_version.outputs.VERSION }}
            
      - name: Build and push Rides Service
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./cmd/rides/Dockerfile
          push: true
          build-args: |
            VERSION=${{ steps.get_version.outputs.VERSION }}
            GIT_COMMIT=${{ github.sha }}
            BUILD_TIME=${{ steps.build_timestamp.outputs.BUILD_TIME }}
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/nebengjek-rides:latest
            ${{ secrets.DOCKER_USERNAME }}/nebengjek-rides:${{ steps.get_version.outputs.VERSION }}

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-docker-images
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Get release version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        
      - name: Set build timestamp
        id: build_timestamp
        run: echo "BUILD_TIME=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
        
      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USERNAME }}
          VERSION: ${{ steps.get_version.outputs.VERSION }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          GIT_COMMIT: ${{ github.sha }}
          BUILD_TIME: ${{ steps.build_timestamp.outputs.BUILD_TIME }}
        run: |
          # Setup SSH key
          echo "$PRIVATE_KEY" > github-ec2.pem 
          chmod 600 github-ec2.pem
          
          # Test SSH connection
          ssh -o StrictHostKeyChecking=no -i github-ec2.pem ${USER}@${HOST} "echo 'SSH connection successful!'"
          
          # Create directory if it doesn't exist
          ssh -o StrictHostKeyChecking=no -i github-ec2.pem ${USER}@${HOST} "mkdir -p ~/nebengjek"
          
          # Copy docker-compose file
          scp -o StrictHostKeyChecking=no -i github-ec2.pem docker-compose.yml ${USER}@${HOST}:~/nebengjek/
          
          # Deploy services using docker-compose with build info
          ssh -o StrictHostKeyChecking=no -i github-ec2.pem ${USER}@${HOST} "cd ~/nebengjek && \
            echo 'Pulling latest Docker images...' && \
            DOCKER_USERNAME=${DOCKER_USERNAME} VERSION=${VERSION} docker-compose pull && \
            echo 'Stopping existing services...' && \
            docker-compose down && \
            echo 'Starting services with new version...' && \
            DOCKER_USERNAME=${DOCKER_USERNAME} \
            VERSION=${VERSION} \
            GIT_COMMIT=${GIT_COMMIT} \
            BUILD_TIME=${BUILD_TIME} \
            docker-compose up -d && \
            echo 'Deployment completed successfully!'"
          
      - name: Verify Deployment
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USERNAME }}
        run: |
          ssh -o StrictHostKeyChecking=no -i github-ec2.pem ${USER}@${HOST} "cd ~/nebengjek && docker-compose ps"
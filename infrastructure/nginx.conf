user nginx;
worker_processes auto;
pid /var/run/nginx.pid;

events {
    worker_connections 4096;
    multi_accept on;
    use epoll;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                     '$status $body_bytes_sent "$http_referer" '
                     '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;
    
    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;
    
    # Compression
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_min_length 256;
    gzip_types
        application/atom+xml
        application/javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rss+xml
        application/vnd.geo+json
        application/vnd.ms-fontobject
        application/x-font-ttf
        application/x-web-app-manifest+json
        application/xhtml+xml
        application/xml
        font/opentype
        image/bmp
        image/svg+xml
        image/x-icon
        text/cache-manifest
        text/css
        text/plain
        text/vcard
        text/vnd.rim.location.xloc
        text/vtt
        text/x-component
        text/x-cross-domain-policy;
    
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=20r/s;
    limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=5r/s;

    # Security headers
    add_header X-Frame-Options SAMEORIGIN;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Referrer-Policy strict-origin-when-cross-origin;
    
    # Upstream definitions - Load balancing
    upstream user_service {
        least_conn;  # Use least connections balancing
        server user-service-1:9995 max_fails=3 fail_timeout=30s;
        server user-service-2:9995 max_fails=3 fail_timeout=30s;
        server user-service-3:9995 max_fails=3 fail_timeout=30s;
    }
    
    upstream location_service {
        ip_hash;  # Use consistent hashing for location data
        server location-service-1:9998 max_fails=3 fail_timeout=30s;
        server location-service-2:9998 max_fails=3 fail_timeout=30s;
    }
    
    upstream match_service {
        least_conn;
        server match-service-1:10000 max_fails=3 fail_timeout=30s;
        server match-service-2:10000 max_fails=3 fail_timeout=30s;
    }
    
    upstream rides_service {
        least_conn;
        server rides-service-1:10002 max_fails=3 fail_timeout=30s;
        server rides-service-2:10002 max_fails=3 fail_timeout=30s;
    }
    
    # WebSocket upstream for real-time features
    upstream websocket_backend {
        ip_hash;  # Important for WebSocket sessions
        server user-service-1:9997 max_fails=3 fail_timeout=30s;
        server user-service-2:9997 max_fails=3 fail_timeout=30s;
    }
    
    # API Gateway server block
    server {
        listen 80;
        server_name api.nebengjek.com;
        
        # Redirect to HTTPS
        return 301 https://$host$request_uri;
    }
    
    server {
        listen 443 ssl http2;
        server_name api.nebengjek.com;
        
        # SSL configuration
        ssl_certificate /etc/nginx/ssl/nebengjek.crt;
        ssl_certificate_key /etc/nginx/ssl/nebengjek.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        
        # JWT authentication verification
        # Specific routes may override this in their location blocks
        auth_jwt "NebengJek API";
        auth_jwt_key_file /etc/nginx/jwt/pubkey.pem;
        
        # Authentication endpoints - no JWT required
        location /auth/ {
            limit_req zone=auth_limit burst=10 nodelay;
            auth_jwt off;
            proxy_pass http://user_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # WebSocket endpoint
        location /ws {
            auth_jwt off;  # Handled within the WebSocket upgrade
            proxy_pass http://websocket_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_read_timeout 300s;
        }
        
        # User service endpoints
        location /users/ {
            limit_req zone=api_limit burst=20 nodelay;
            proxy_pass http://user_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Drivers specific endpoints
        location /drivers/ {
            limit_req zone=api_limit burst=20 nodelay;
            proxy_pass http://user_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Location service endpoints - restricted to authenticated
        location /locations/ {
            limit_req zone=api_limit burst=40 nodelay; # Higher limit for frequent location updates
            proxy_pass http://location_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Match service endpoints
        location /matches/ {
            limit_req zone=api_limit burst=20 nodelay;
            proxy_pass http://match_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Rides service endpoints
        location /rides/ {
            limit_req zone=api_limit burst=20 nodelay;
            proxy_pass http://rides_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Payments endpoint - sensitive financial data
        location /payments/ {
            limit_req zone=api_limit burst=10 nodelay;
            proxy_pass http://rides_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            # Extra security headers for payment endpoints
            add_header Content-Security-Policy "default-src 'self';" always;
            add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        }
        
        # Internal service-to-service communication (requires API key)
        location /internal/ {
            auth_jwt off;
            # API key verification via custom header
            if ($http_x_api_key = "") {
                return 401;
            }
            
            # Route based on the service
            location /internal/users/ {
                proxy_pass http://user_service/internal/users/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            }
            
            location /internal/locations/ {
                proxy_pass http://location_service/internal/locations/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            }
            
            location /internal/matches/ {
                proxy_pass http://match_service/internal/matches/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            }
            
            location /internal/rides/ {
                proxy_pass http://rides_service/internal/rides/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            }
        }
        
        # Health checks for load balancers
        location /health {
            access_log off;
            auth_jwt off;
            add_header Content-Type application/json;
            return 200 '{"status": "ok", "timestamp": "$time_iso8601"}';
        }
        
        # Error pages
        error_page 404 /404.html;
        location = /404.html {
            root /usr/share/nginx/html;
            internal;
        }
        
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }
    }
}
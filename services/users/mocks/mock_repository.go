// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/piresc/nebengjek/services/users (interfaces: UserRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/piresc/nebengjek/internal/pkg/models"
)

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// CreateOTP mocks base method.
func (m *MockUserRepo) CreateOTP(arg0 context.Context, arg1 *models.OTP) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOTP", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOTP indicates an expected call of CreateOTP.
func (mr *MockUserRepoMockRecorder) CreateOTP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOTP", reflect.TypeOf((*MockUserRepo)(nil).CreateOTP), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockUserRepo) CreateUser(arg0 context.Context, arg1 *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepoMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepo)(nil).CreateUser), arg0, arg1)
}

// GetOTP mocks base method.
func (m *MockUserRepo) GetOTP(arg0 context.Context, arg1, arg2 string) (*models.OTP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOTP", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.OTP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOTP indicates an expected call of GetOTP.
func (mr *MockUserRepoMockRecorder) GetOTP(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOTP", reflect.TypeOf((*MockUserRepo)(nil).GetOTP), arg0, arg1, arg2)
}

// GetUserByID mocks base method.
func (m *MockUserRepo) GetUserByID(arg0 context.Context, arg1 string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", arg0, arg1)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserRepoMockRecorder) GetUserByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserRepo)(nil).GetUserByID), arg0, arg1)
}

// GetUserByMSISDN mocks base method.
func (m *MockUserRepo) GetUserByMSISDN(arg0 context.Context, arg1 string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByMSISDN", arg0, arg1)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByMSISDN indicates an expected call of GetUserByMSISDN.
func (mr *MockUserRepoMockRecorder) GetUserByMSISDN(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByMSISDN", reflect.TypeOf((*MockUserRepo)(nil).GetUserByMSISDN), arg0, arg1)
}

// MarkOTPVerified mocks base method.
func (m *MockUserRepo) MarkOTPVerified(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkOTPVerified", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkOTPVerified indicates an expected call of MarkOTPVerified.
func (mr *MockUserRepoMockRecorder) MarkOTPVerified(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkOTPVerified", reflect.TypeOf((*MockUserRepo)(nil).MarkOTPVerified), arg0, arg1, arg2)
}

// UpdateToDriver mocks base method.
func (m *MockUserRepo) UpdateToDriver(arg0 context.Context, arg1 *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateToDriver", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateToDriver indicates an expected call of UpdateToDriver.
func (mr *MockUserRepoMockRecorder) UpdateToDriver(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateToDriver", reflect.TypeOf((*MockUserRepo)(nil).UpdateToDriver), arg0, arg1)
}

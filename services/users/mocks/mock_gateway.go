// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/piresc/nebengjek/services/users (interfaces: UserGW)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/piresc/nebengjek/internal/pkg/models"
)

// MockUserGW is a mock of UserGW interface.
type MockUserGW struct {
	ctrl     *gomock.Controller
	recorder *MockUserGWMockRecorder
}

// MockUserGWMockRecorder is the mock recorder for MockUserGW.
type MockUserGWMockRecorder struct {
	mock *MockUserGW
}

// NewMockUserGW creates a new mock instance.
func NewMockUserGW(ctrl *gomock.Controller) *MockUserGW {
	mock := &MockUserGW{ctrl: ctrl}
	mock.recorder = &MockUserGWMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserGW) EXPECT() *MockUserGWMockRecorder {
	return m.recorder
}

// MatchAccept mocks base method.
func (m *MockUserGW) MatchAccept(arg0 *models.MatchProposal, arg1 string, arg2 bool) (*models.MatchProposal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchAccept", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.MatchProposal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchAccept indicates an expected call of MatchAccept.
func (mr *MockUserGWMockRecorder) MatchAccept(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchAccept", reflect.TypeOf((*MockUserGW)(nil).MatchAccept), arg0, arg1, arg2)
}

// MatchReject mocks base method.
func (m *MockUserGW) MatchReject(arg0 *models.MatchProposal, arg1 string, arg2 bool) (*models.MatchProposal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchReject", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.MatchProposal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchReject indicates an expected call of MatchReject.
func (mr *MockUserGWMockRecorder) MatchReject(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchReject", reflect.TypeOf((*MockUserGW)(nil).MatchReject), arg0, arg1, arg2)
}

// PublishBeaconEvent mocks base method.
func (m *MockUserGW) PublishBeaconEvent(arg0 context.Context, arg1 *models.BeaconEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishBeaconEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishBeaconEvent indicates an expected call of PublishBeaconEvent.
func (mr *MockUserGWMockRecorder) PublishBeaconEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishBeaconEvent", reflect.TypeOf((*MockUserGW)(nil).PublishBeaconEvent), arg0, arg1)
}

// PublishLocationUpdate mocks base method.
func (m *MockUserGW) PublishLocationUpdate(arg0 context.Context, arg1 *models.LocationUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishLocationUpdate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishLocationUpdate indicates an expected call of PublishLocationUpdate.
func (mr *MockUserGWMockRecorder) PublishLocationUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishLocationUpdate", reflect.TypeOf((*MockUserGW)(nil).PublishLocationUpdate), arg0, arg1)
}

// PublishRideArrived mocks base method.
func (m *MockUserGW) PublishRideArrived(arg0 context.Context, arg1 *models.RideCompleteEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishRideArrived", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishRideArrived indicates an expected call of PublishRideArrived.
func (mr *MockUserGWMockRecorder) PublishRideArrived(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishRideArrived", reflect.TypeOf((*MockUserGW)(nil).PublishRideArrived), arg0, arg1)
}

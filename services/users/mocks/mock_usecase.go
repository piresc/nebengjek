// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/piresc/nebengjek/services/users (interfaces: UserUC)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/piresc/nebengjek/internal/pkg/models"
)

// MockUserUC is a mock of UserUC interface.
type MockUserUC struct {
	ctrl     *gomock.Controller
	recorder *MockUserUCMockRecorder
}

// MockUserUCMockRecorder is the mock recorder for MockUserUC.
type MockUserUCMockRecorder struct {
	mock *MockUserUC
}

// NewMockUserUC creates a new mock instance.
func NewMockUserUC(ctrl *gomock.Controller) *MockUserUC {
	mock := &MockUserUC{ctrl: ctrl}
	mock.recorder = &MockUserUCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUC) EXPECT() *MockUserUCMockRecorder {
	return m.recorder
}

// ConfirmMatch mocks base method.
func (m *MockUserUC) ConfirmMatch(arg0 context.Context, arg1 *models.MatchConfirmRequest) (*models.MatchProposal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmMatch", arg0, arg1)
	ret0, _ := ret[0].(*models.MatchProposal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfirmMatch indicates an expected call of ConfirmMatch.
func (mr *MockUserUCMockRecorder) ConfirmMatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmMatch", reflect.TypeOf((*MockUserUC)(nil).ConfirmMatch), arg0, arg1)
}

// GenerateOTP mocks base method.
func (m *MockUserUC) GenerateOTP(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateOTP", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateOTP indicates an expected call of GenerateOTP.
func (mr *MockUserUCMockRecorder) GenerateOTP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateOTP", reflect.TypeOf((*MockUserUC)(nil).GenerateOTP), arg0, arg1)
}

// GetUserByID mocks base method.
func (m *MockUserUC) GetUserByID(arg0 context.Context, arg1 string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", arg0, arg1)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserUCMockRecorder) GetUserByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserUC)(nil).GetUserByID), arg0, arg1)
}

// ProcessPayment mocks base method.
func (m *MockUserUC) ProcessPayment(arg0 context.Context, arg1 *models.PaymentProccessRequest) (*models.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessPayment", arg0, arg1)
	ret0, _ := ret[0].(*models.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessPayment indicates an expected call of ProcessPayment.
func (mr *MockUserUCMockRecorder) ProcessPayment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessPayment", reflect.TypeOf((*MockUserUC)(nil).ProcessPayment), arg0, arg1)
}

// RegisterDriver mocks base method.
func (m *MockUserUC) RegisterDriver(arg0 context.Context, arg1 *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterDriver", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterDriver indicates an expected call of RegisterDriver.
func (mr *MockUserUCMockRecorder) RegisterDriver(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterDriver", reflect.TypeOf((*MockUserUC)(nil).RegisterDriver), arg0, arg1)
}

// RegisterUser mocks base method.
func (m *MockUserUC) RegisterUser(arg0 context.Context, arg1 *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockUserUCMockRecorder) RegisterUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockUserUC)(nil).RegisterUser), arg0, arg1)
}

// RideArrived mocks base method.
func (m *MockUserUC) RideArrived(arg0 context.Context, arg1 *models.RideArrivalReq) (*models.PaymentRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RideArrived", arg0, arg1)
	ret0, _ := ret[0].(*models.PaymentRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RideArrived indicates an expected call of RideArrived.
func (mr *MockUserUCMockRecorder) RideArrived(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RideArrived", reflect.TypeOf((*MockUserUC)(nil).RideArrived), arg0, arg1)
}

// RideStart mocks base method.
func (m *MockUserUC) RideStart(arg0 context.Context, arg1 *models.RideStartRequest) (*models.Ride, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RideStart", arg0, arg1)
	ret0, _ := ret[0].(*models.Ride)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RideStart indicates an expected call of RideStart.
func (mr *MockUserUCMockRecorder) RideStart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RideStart", reflect.TypeOf((*MockUserUC)(nil).RideStart), arg0, arg1)
}

// UpdateBeaconStatus mocks base method.
func (m *MockUserUC) UpdateBeaconStatus(arg0 context.Context, arg1 *models.BeaconRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBeaconStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBeaconStatus indicates an expected call of UpdateBeaconStatus.
func (mr *MockUserUCMockRecorder) UpdateBeaconStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBeaconStatus", reflect.TypeOf((*MockUserUC)(nil).UpdateBeaconStatus), arg0, arg1)
}

// UpdateFinderStatus mocks base method.
func (m *MockUserUC) UpdateFinderStatus(arg0 context.Context, arg1 *models.FinderRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFinderStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFinderStatus indicates an expected call of UpdateFinderStatus.
func (mr *MockUserUCMockRecorder) UpdateFinderStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFinderStatus", reflect.TypeOf((*MockUserUC)(nil).UpdateFinderStatus), arg0, arg1)
}

// UpdateUserLocation mocks base method.
func (m *MockUserUC) UpdateUserLocation(arg0 context.Context, arg1 *models.LocationUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserLocation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserLocation indicates an expected call of UpdateUserLocation.
func (mr *MockUserUCMockRecorder) UpdateUserLocation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserLocation", reflect.TypeOf((*MockUserUC)(nil).UpdateUserLocation), arg0, arg1)
}

// VerifyOTP mocks base method.
func (m *MockUserUC) VerifyOTP(arg0 context.Context, arg1, arg2 string) (*models.AuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyOTP", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.AuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyOTP indicates an expected call of VerifyOTP.
func (mr *MockUserUCMockRecorder) VerifyOTP(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyOTP", reflect.TypeOf((*MockUserUC)(nil).VerifyOTP), arg0, arg1, arg2)
}

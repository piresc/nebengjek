// Code generated by MockGen. DO NOT EDIT.
// Source: services/match/usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/piresc/nebengjek/internal/pkg/models"
)

// MockMatchUC is a mock of MatchUC interface.
type MockMatchUC struct {
	ctrl     *gomock.Controller
	recorder *MockMatchUCMockRecorder
}

// MockMatchUCMockRecorder is the mock recorder for MockMatchUC.
type MockMatchUCMockRecorder struct {
	mock *MockMatchUC
}

// NewMockMatchUC creates a new mock instance.
func NewMockMatchUC(ctrl *gomock.Controller) *MockMatchUC {
	mock := &MockMatchUC{ctrl: ctrl}
	mock.recorder = &MockMatchUCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMatchUC) EXPECT() *MockMatchUCMockRecorder {
	return m.recorder
}

// HandleBeaconEvent mocks base method.
func (m *MockMatchUC) HandleBeaconEvent(event models.BeaconEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleBeaconEvent", event)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleBeaconEvent indicates an expected call of HandleBeaconEvent.
func (mr *MockMatchUCMockRecorder) HandleBeaconEvent(event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleBeaconEvent", reflect.TypeOf((*MockMatchUC)(nil).HandleBeaconEvent), event)
}

// ConfirmMatchStatus mocks base method.
func (m *MockMatchUC) ConfirmMatchStatus(matchID string, mp models.MatchProposal) (models.MatchProposal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmMatchStatus", matchID, mp)
	ret0, _ := ret[0].(models.MatchProposal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfirmMatchStatus indicates an expected call of ConfirmMatchStatus.
func (mr *MockMatchUCMockRecorder) ConfirmMatchStatus(matchID, mp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmMatchStatus", reflect.TypeOf((*MockMatchUC)(nil).ConfirmMatchStatus), matchID, mp)
}
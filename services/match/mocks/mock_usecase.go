// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/piresc/nebengjek/services/match (interfaces: MatchUC)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/piresc/nebengjek/internal/pkg/models"
)

// MockMatchUC is a mock of MatchUC interface.
type MockMatchUC struct {
	ctrl     *gomock.Controller
	recorder *MockMatchUCMockRecorder
}

// MockMatchUCMockRecorder is the mock recorder for MockMatchUC.
type MockMatchUCMockRecorder struct {
	mock *MockMatchUC
}

// NewMockMatchUC creates a new mock instance.
func NewMockMatchUC(ctrl *gomock.Controller) *MockMatchUC {
	mock := &MockMatchUC{ctrl: ctrl}
	mock.recorder = &MockMatchUCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMatchUC) EXPECT() *MockMatchUCMockRecorder {
	return m.recorder
}

// ConfirmMatchStatus mocks base method.
func (m *MockMatchUC) ConfirmMatchStatus(arg0 *models.MatchConfirmRequest) (models.MatchProposal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmMatchStatus", arg0)
	ret0, _ := ret[0].(models.MatchProposal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfirmMatchStatus indicates an expected call of ConfirmMatchStatus.
func (mr *MockMatchUCMockRecorder) ConfirmMatchStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmMatchStatus", reflect.TypeOf((*MockMatchUC)(nil).ConfirmMatchStatus), arg0)
}

// GetMatch mocks base method.
func (m *MockMatchUC) GetMatch(arg0 context.Context, arg1 string) (*models.Match, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatch", arg0, arg1)
	ret0, _ := ret[0].(*models.Match)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatch indicates an expected call of GetMatch.
func (mr *MockMatchUCMockRecorder) GetMatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatch", reflect.TypeOf((*MockMatchUC)(nil).GetMatch), arg0, arg1)
}

// GetPendingMatch mocks base method.
func (m *MockMatchUC) GetPendingMatch(arg0 context.Context, arg1 string) (*models.Match, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingMatch", arg0, arg1)
	ret0, _ := ret[0].(*models.Match)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingMatch indicates an expected call of GetPendingMatch.
func (mr *MockMatchUCMockRecorder) GetPendingMatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingMatch", reflect.TypeOf((*MockMatchUC)(nil).GetPendingMatch), arg0, arg1)
}

// HandleBeaconEvent mocks base method.
func (m *MockMatchUC) HandleBeaconEvent(arg0 models.BeaconEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleBeaconEvent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleBeaconEvent indicates an expected call of HandleBeaconEvent.
func (mr *MockMatchUCMockRecorder) HandleBeaconEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleBeaconEvent", reflect.TypeOf((*MockMatchUC)(nil).HandleBeaconEvent), arg0)
}

// HandleFinderEvent mocks base method.
func (m *MockMatchUC) HandleFinderEvent(arg0 models.FinderEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleFinderEvent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleFinderEvent indicates an expected call of HandleFinderEvent.
func (mr *MockMatchUCMockRecorder) HandleFinderEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleFinderEvent", reflect.TypeOf((*MockMatchUC)(nil).HandleFinderEvent), arg0)
}

// HasActiveRide mocks base method.
func (m *MockMatchUC) HasActiveRide(arg0 context.Context, arg1 string, arg2 bool) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasActiveRide", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasActiveRide indicates an expected call of HasActiveRide.
func (mr *MockMatchUCMockRecorder) HasActiveRide(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasActiveRide", reflect.TypeOf((*MockMatchUC)(nil).HasActiveRide), arg0, arg1, arg2)
}

// ReleaseDriver mocks base method.
func (m *MockMatchUC) ReleaseDriver(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseDriver", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseDriver indicates an expected call of ReleaseDriver.
func (mr *MockMatchUCMockRecorder) ReleaseDriver(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseDriver", reflect.TypeOf((*MockMatchUC)(nil).ReleaseDriver), arg0)
}

// ReleasePassenger mocks base method.
func (m *MockMatchUC) ReleasePassenger(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleasePassenger", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleasePassenger indicates an expected call of ReleasePassenger.
func (mr *MockMatchUCMockRecorder) ReleasePassenger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleasePassenger", reflect.TypeOf((*MockMatchUC)(nil).ReleasePassenger), arg0)
}

// RemoveActiveRide mocks base method.
func (m *MockMatchUC) RemoveActiveRide(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveActiveRide", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveActiveRide indicates an expected call of RemoveActiveRide.
func (mr *MockMatchUCMockRecorder) RemoveActiveRide(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveActiveRide", reflect.TypeOf((*MockMatchUC)(nil).RemoveActiveRide), arg0, arg1, arg2)
}

// RemoveDriverFromPool mocks base method.
func (m *MockMatchUC) RemoveDriverFromPool(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDriverFromPool", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDriverFromPool indicates an expected call of RemoveDriverFromPool.
func (mr *MockMatchUCMockRecorder) RemoveDriverFromPool(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDriverFromPool", reflect.TypeOf((*MockMatchUC)(nil).RemoveDriverFromPool), arg0, arg1)
}

// RemovePassengerFromPool mocks base method.
func (m *MockMatchUC) RemovePassengerFromPool(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePassengerFromPool", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePassengerFromPool indicates an expected call of RemovePassengerFromPool.
func (mr *MockMatchUCMockRecorder) RemovePassengerFromPool(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePassengerFromPool", reflect.TypeOf((*MockMatchUC)(nil).RemovePassengerFromPool), arg0, arg1)
}

// SetActiveRide mocks base method.
func (m *MockMatchUC) SetActiveRide(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetActiveRide", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetActiveRide indicates an expected call of SetActiveRide.
func (mr *MockMatchUCMockRecorder) SetActiveRide(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetActiveRide", reflect.TypeOf((*MockMatchUC)(nil).SetActiveRide), arg0, arg1, arg2, arg3)
}

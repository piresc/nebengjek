// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/piresc/nebengjek/services/match (interfaces: MatchRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	models "github.com/piresc/nebengjek/internal/pkg/models"
)

// MockMatchRepo is a mock of MatchRepo interface.
type MockMatchRepo struct {
	ctrl     *gomock.Controller
	recorder *MockMatchRepoMockRecorder
}

// MockMatchRepoMockRecorder is the mock recorder for MockMatchRepo.
type MockMatchRepoMockRecorder struct {
	mock *MockMatchRepo
}

// NewMockMatchRepo creates a new mock instance.
func NewMockMatchRepo(ctrl *gomock.Controller) *MockMatchRepo {
	mock := &MockMatchRepo{ctrl: ctrl}
	mock.recorder = &MockMatchRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMatchRepo) EXPECT() *MockMatchRepoMockRecorder {
	return m.recorder
}

// AddAvailableDriver mocks base method.
func (m *MockMatchRepo) AddAvailableDriver(arg0 context.Context, arg1 string, arg2 *models.Location) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAvailableDriver", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAvailableDriver indicates an expected call of AddAvailableDriver.
func (mr *MockMatchRepoMockRecorder) AddAvailableDriver(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAvailableDriver", reflect.TypeOf((*MockMatchRepo)(nil).AddAvailableDriver), arg0, arg1, arg2)
}

// AddAvailablePassenger mocks base method.
func (m *MockMatchRepo) AddAvailablePassenger(arg0 context.Context, arg1 string, arg2 *models.Location) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAvailablePassenger", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAvailablePassenger indicates an expected call of AddAvailablePassenger.
func (mr *MockMatchRepoMockRecorder) AddAvailablePassenger(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAvailablePassenger", reflect.TypeOf((*MockMatchRepo)(nil).AddAvailablePassenger), arg0, arg1, arg2)
}

// BatchUpdateMatchStatus mocks base method.
func (m *MockMatchRepo) BatchUpdateMatchStatus(arg0 context.Context, arg1 []string, arg2 models.MatchStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdateMatchStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchUpdateMatchStatus indicates an expected call of BatchUpdateMatchStatus.
func (mr *MockMatchRepoMockRecorder) BatchUpdateMatchStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateMatchStatus", reflect.TypeOf((*MockMatchRepo)(nil).BatchUpdateMatchStatus), arg0, arg1, arg2)
}

// ConfirmMatchAtomically mocks base method.
func (m *MockMatchRepo) ConfirmMatchAtomically(arg0 context.Context, arg1 string, arg2 models.MatchStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmMatchAtomically", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfirmMatchAtomically indicates an expected call of ConfirmMatchAtomically.
func (mr *MockMatchRepoMockRecorder) ConfirmMatchAtomically(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmMatchAtomically", reflect.TypeOf((*MockMatchRepo)(nil).ConfirmMatchAtomically), arg0, arg1, arg2)
}

// ConfirmMatchByUser mocks base method.
func (m *MockMatchRepo) ConfirmMatchByUser(arg0 context.Context, arg1, arg2 string, arg3 bool) (*models.Match, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmMatchByUser", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*models.Match)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfirmMatchByUser indicates an expected call of ConfirmMatchByUser.
func (mr *MockMatchRepoMockRecorder) ConfirmMatchByUser(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmMatchByUser", reflect.TypeOf((*MockMatchRepo)(nil).ConfirmMatchByUser), arg0, arg1, arg2, arg3)
}

// CreateMatch mocks base method.
func (m *MockMatchRepo) CreateMatch(arg0 context.Context, arg1 *models.Match) (*models.Match, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMatch", arg0, arg1)
	ret0, _ := ret[0].(*models.Match)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMatch indicates an expected call of CreateMatch.
func (mr *MockMatchRepoMockRecorder) CreateMatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMatch", reflect.TypeOf((*MockMatchRepo)(nil).CreateMatch), arg0, arg1)
}

// FindNearbyDrivers mocks base method.
func (m *MockMatchRepo) FindNearbyDrivers(arg0 context.Context, arg1 *models.Location, arg2 float64) ([]*models.NearbyUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNearbyDrivers", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*models.NearbyUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNearbyDrivers indicates an expected call of FindNearbyDrivers.
func (mr *MockMatchRepoMockRecorder) FindNearbyDrivers(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNearbyDrivers", reflect.TypeOf((*MockMatchRepo)(nil).FindNearbyDrivers), arg0, arg1, arg2)
}

// FindNearbyPassengers mocks base method.
func (m *MockMatchRepo) FindNearbyPassengers(arg0 context.Context, arg1 *models.Location, arg2 float64) ([]*models.NearbyUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNearbyPassengers", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*models.NearbyUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNearbyPassengers indicates an expected call of FindNearbyPassengers.
func (mr *MockMatchRepoMockRecorder) FindNearbyPassengers(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNearbyPassengers", reflect.TypeOf((*MockMatchRepo)(nil).FindNearbyPassengers), arg0, arg1, arg2)
}

// GetDriverLocation mocks base method.
func (m *MockMatchRepo) GetDriverLocation(arg0 context.Context, arg1 string) (models.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDriverLocation", arg0, arg1)
	ret0, _ := ret[0].(models.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDriverLocation indicates an expected call of GetDriverLocation.
func (mr *MockMatchRepoMockRecorder) GetDriverLocation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDriverLocation", reflect.TypeOf((*MockMatchRepo)(nil).GetDriverLocation), arg0, arg1)
}

// GetMatch mocks base method.
func (m *MockMatchRepo) GetMatch(arg0 context.Context, arg1 string) (*models.Match, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatch", arg0, arg1)
	ret0, _ := ret[0].(*models.Match)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatch indicates an expected call of GetMatch.
func (mr *MockMatchRepoMockRecorder) GetMatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatch", reflect.TypeOf((*MockMatchRepo)(nil).GetMatch), arg0, arg1)
}

// GetPassengerLocation mocks base method.
func (m *MockMatchRepo) GetPassengerLocation(arg0 context.Context, arg1 string) (models.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPassengerLocation", arg0, arg1)
	ret0, _ := ret[0].(models.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPassengerLocation indicates an expected call of GetPassengerLocation.
func (mr *MockMatchRepoMockRecorder) GetPassengerLocation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPassengerLocation", reflect.TypeOf((*MockMatchRepo)(nil).GetPassengerLocation), arg0, arg1)
}

// ListMatchesByDriver mocks base method.
func (m *MockMatchRepo) ListMatchesByDriver(arg0 context.Context, arg1 uuid.UUID) ([]*models.Match, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMatchesByDriver", arg0, arg1)
	ret0, _ := ret[0].([]*models.Match)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMatchesByDriver indicates an expected call of ListMatchesByDriver.
func (mr *MockMatchRepoMockRecorder) ListMatchesByDriver(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMatchesByDriver", reflect.TypeOf((*MockMatchRepo)(nil).ListMatchesByDriver), arg0, arg1)
}

// ListMatchesByPassenger mocks base method.
func (m *MockMatchRepo) ListMatchesByPassenger(arg0 context.Context, arg1 uuid.UUID) ([]*models.Match, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMatchesByPassenger", arg0, arg1)
	ret0, _ := ret[0].([]*models.Match)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMatchesByPassenger indicates an expected call of ListMatchesByPassenger.
func (mr *MockMatchRepoMockRecorder) ListMatchesByPassenger(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMatchesByPassenger", reflect.TypeOf((*MockMatchRepo)(nil).ListMatchesByPassenger), arg0, arg1)
}

// ProcessLocationUpdate mocks base method.
func (m *MockMatchRepo) ProcessLocationUpdate(arg0 context.Context, arg1 string, arg2 *models.Location) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessLocationUpdate", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessLocationUpdate indicates an expected call of ProcessLocationUpdate.
func (mr *MockMatchRepoMockRecorder) ProcessLocationUpdate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessLocationUpdate", reflect.TypeOf((*MockMatchRepo)(nil).ProcessLocationUpdate), arg0, arg1, arg2)
}

// RemoveAvailableDriver mocks base method.
func (m *MockMatchRepo) RemoveAvailableDriver(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAvailableDriver", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAvailableDriver indicates an expected call of RemoveAvailableDriver.
func (mr *MockMatchRepoMockRecorder) RemoveAvailableDriver(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAvailableDriver", reflect.TypeOf((*MockMatchRepo)(nil).RemoveAvailableDriver), arg0, arg1)
}

// RemoveAvailablePassenger mocks base method.
func (m *MockMatchRepo) RemoveAvailablePassenger(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAvailablePassenger", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAvailablePassenger indicates an expected call of RemoveAvailablePassenger.
func (mr *MockMatchRepoMockRecorder) RemoveAvailablePassenger(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAvailablePassenger", reflect.TypeOf((*MockMatchRepo)(nil).RemoveAvailablePassenger), arg0, arg1)
}

// StoreMatchProposal mocks base method.
func (m *MockMatchRepo) StoreMatchProposal(arg0 context.Context, arg1 *models.Match) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreMatchProposal", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreMatchProposal indicates an expected call of StoreMatchProposal.
func (mr *MockMatchRepoMockRecorder) StoreMatchProposal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreMatchProposal", reflect.TypeOf((*MockMatchRepo)(nil).StoreMatchProposal), arg0, arg1)
}

// UpdateMatchStatus mocks base method.
func (m *MockMatchRepo) UpdateMatchStatus(arg0 context.Context, arg1 string, arg2 models.MatchStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMatchStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMatchStatus indicates an expected call of UpdateMatchStatus.
func (mr *MockMatchRepoMockRecorder) UpdateMatchStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMatchStatus", reflect.TypeOf((*MockMatchRepo)(nil).UpdateMatchStatus), arg0, arg1, arg2)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/piresc/nebengjek/services/match (interfaces: MatchRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	models "github.com/piresc/nebengjek/internal/pkg/models"
)

// MockMatchRepo is a mock of MatchRepo interface.
type MockMatchRepo struct {
	ctrl     *gomock.Controller
	recorder *MockMatchRepoMockRecorder
}

// MockMatchRepoMockRecorder is the mock recorder for MockMatchRepo.
type MockMatchRepoMockRecorder struct {
	mock *MockMatchRepo
}

// NewMockMatchRepo creates a new mock instance.
func NewMockMatchRepo(ctrl *gomock.Controller) *MockMatchRepo {
	mock := &MockMatchRepo{ctrl: ctrl}
	mock.recorder = &MockMatchRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMatchRepo) EXPECT() *MockMatchRepoMockRecorder {
	return m.recorder
}

// BatchUpdateMatchStatus mocks base method.
func (m *MockMatchRepo) BatchUpdateMatchStatus(arg0 context.Context, arg1 []string, arg2 models.MatchStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdateMatchStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchUpdateMatchStatus indicates an expected call of BatchUpdateMatchStatus.
func (mr *MockMatchRepoMockRecorder) BatchUpdateMatchStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateMatchStatus", reflect.TypeOf((*MockMatchRepo)(nil).BatchUpdateMatchStatus), arg0, arg1, arg2)
}

// ConfirmMatchByUser mocks base method.
func (m *MockMatchRepo) ConfirmMatchByUser(arg0 context.Context, arg1, arg2 string, arg3 bool) (*models.Match, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmMatchByUser", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*models.Match)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfirmMatchByUser indicates an expected call of ConfirmMatchByUser.
func (mr *MockMatchRepoMockRecorder) ConfirmMatchByUser(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmMatchByUser", reflect.TypeOf((*MockMatchRepo)(nil).ConfirmMatchByUser), arg0, arg1, arg2, arg3)
}

// CreateMatch mocks base method.
func (m *MockMatchRepo) CreateMatch(arg0 context.Context, arg1 *models.Match) (*models.Match, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMatch", arg0, arg1)
	ret0, _ := ret[0].(*models.Match)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMatch indicates an expected call of CreateMatch.
func (mr *MockMatchRepoMockRecorder) CreateMatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMatch", reflect.TypeOf((*MockMatchRepo)(nil).CreateMatch), arg0, arg1)
}

// GetActiveRideByDriver mocks base method.
func (m *MockMatchRepo) GetActiveRideByDriver(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveRideByDriver", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveRideByDriver indicates an expected call of GetActiveRideByDriver.
func (mr *MockMatchRepoMockRecorder) GetActiveRideByDriver(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveRideByDriver", reflect.TypeOf((*MockMatchRepo)(nil).GetActiveRideByDriver), arg0, arg1)
}

// GetActiveRideByPassenger mocks base method.
func (m *MockMatchRepo) GetActiveRideByPassenger(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveRideByPassenger", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveRideByPassenger indicates an expected call of GetActiveRideByPassenger.
func (mr *MockMatchRepoMockRecorder) GetActiveRideByPassenger(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveRideByPassenger", reflect.TypeOf((*MockMatchRepo)(nil).GetActiveRideByPassenger), arg0, arg1)
}

// GetMatch mocks base method.
func (m *MockMatchRepo) GetMatch(arg0 context.Context, arg1 string) (*models.Match, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatch", arg0, arg1)
	ret0, _ := ret[0].(*models.Match)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatch indicates an expected call of GetMatch.
func (mr *MockMatchRepoMockRecorder) GetMatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatch", reflect.TypeOf((*MockMatchRepo)(nil).GetMatch), arg0, arg1)
}

// ListMatchesByPassenger mocks base method.
func (m *MockMatchRepo) ListMatchesByPassenger(arg0 context.Context, arg1 uuid.UUID) ([]*models.Match, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMatchesByPassenger", arg0, arg1)
	ret0, _ := ret[0].([]*models.Match)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMatchesByPassenger indicates an expected call of ListMatchesByPassenger.
func (mr *MockMatchRepoMockRecorder) ListMatchesByPassenger(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMatchesByPassenger", reflect.TypeOf((*MockMatchRepo)(nil).ListMatchesByPassenger), arg0, arg1)
}

// RemoveActiveRide mocks base method.
func (m *MockMatchRepo) RemoveActiveRide(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveActiveRide", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveActiveRide indicates an expected call of RemoveActiveRide.
func (mr *MockMatchRepoMockRecorder) RemoveActiveRide(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveActiveRide", reflect.TypeOf((*MockMatchRepo)(nil).RemoveActiveRide), arg0, arg1, arg2)
}

// SetActiveRide mocks base method.
func (m *MockMatchRepo) SetActiveRide(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetActiveRide", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetActiveRide indicates an expected call of SetActiveRide.
func (mr *MockMatchRepoMockRecorder) SetActiveRide(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetActiveRide", reflect.TypeOf((*MockMatchRepo)(nil).SetActiveRide), arg0, arg1, arg2, arg3)
}

// UpdateMatchStatus mocks base method.
func (m *MockMatchRepo) UpdateMatchStatus(arg0 context.Context, arg1 string, arg2 models.MatchStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMatchStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMatchStatus indicates an expected call of UpdateMatchStatus.
func (mr *MockMatchRepoMockRecorder) UpdateMatchStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMatchStatus", reflect.TypeOf((*MockMatchRepo)(nil).UpdateMatchStatus), arg0, arg1, arg2)
}

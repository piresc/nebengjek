// Code generated by MockGen. DO NOT EDIT.
// Source: services/match/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	"time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	models "github.com/piresc/nebengjek/internal/pkg/models"
)

// MockMatchRepo is a mock of MatchRepo interface.
type MockMatchRepo struct {
	ctrl     *gomock.Controller
	recorder *MockMatchRepoMockRecorder
}

// MockMatchRepoMockRecorder is the mock recorder for MockMatchRepo.
type MockMatchRepoMockRecorder struct {
	mock *MockMatchRepo
}

// NewMockMatchRepo creates a new mock instance.
func NewMockMatchRepo(ctrl *gomock.Controller) *MockMatchRepo {
	mock := &MockMatchRepo{ctrl: ctrl}
	mock.recorder = &MockMatchRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMatchRepo) EXPECT() *MockMatchRepoMockRecorder {
	return m.recorder
}

// AddAvailableDriver mocks base method.
func (m *MockMatchRepo) AddAvailableDriver(ctx context.Context, driverID string, location *models.Location) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAvailableDriver", ctx, driverID, location)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAvailableDriver indicates an expected call of AddAvailableDriver.
func (mr *MockMatchRepoMockRecorder) AddAvailableDriver(ctx, driverID, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAvailableDriver", reflect.TypeOf((*MockMatchRepo)(nil).AddAvailableDriver), ctx, driverID, location)
}

// AddAvailablePassenger mocks base method.
func (m *MockMatchRepo) AddAvailablePassenger(ctx context.Context, passengerID string, location *models.Location) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAvailablePassenger", ctx, passengerID, location)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAvailablePassenger indicates an expected call of AddAvailablePassenger.
func (mr *MockMatchRepoMockRecorder) AddAvailablePassenger(ctx, passengerID, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAvailablePassenger", reflect.TypeOf((*MockMatchRepo)(nil).AddAvailablePassenger), ctx, passengerID, location)
}

// ConfirmAndPersistMatch mocks base method.
func (m *MockMatchRepo) ConfirmAndPersistMatch(ctx context.Context, driverID, passengerID string) (*models.Match, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmAndPersistMatch", ctx, driverID, passengerID)
	ret0, _ := ret[0].(*models.Match)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfirmAndPersistMatch indicates an expected call of ConfirmAndPersistMatch.
func (mr *MockMatchRepoMockRecorder) ConfirmAndPersistMatch(ctx, driverID, passengerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmAndPersistMatch", reflect.TypeOf((*MockMatchRepo)(nil).ConfirmAndPersistMatch), ctx, driverID, passengerID)
}

// ConfirmMatchAtomically mocks base method.
func (m *MockMatchRepo) ConfirmMatchAtomically(ctx context.Context, matchID string, status models.MatchStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmMatchAtomically", ctx, matchID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfirmMatchAtomically indicates an expected call of ConfirmMatchAtomically.
func (mr *MockMatchRepoMockRecorder) ConfirmMatchAtomically(ctx, matchID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmMatchAtomically", reflect.TypeOf((*MockMatchRepo)(nil).ConfirmMatchAtomically), ctx, matchID, status)
}

// CreateMatch mocks base method.
func (m *MockMatchRepo) CreateMatch(ctx context.Context, match *models.Match) (*models.Match, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMatch", ctx, match)
	ret0, _ := ret[0].(*models.Match)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMatch indicates an expected call of CreateMatch.
func (mr *MockMatchRepoMockRecorder) CreateMatch(ctx, match interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMatch", reflect.TypeOf((*MockMatchRepo)(nil).CreateMatch), ctx, match)
}

// CreatePendingMatch mocks base method.
func (m *MockMatchRepo) CreatePendingMatch(ctx context.Context, match *models.Match) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePendingMatch", ctx, match)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePendingMatch indicates an expected call of CreatePendingMatch.
func (mr *MockMatchRepoMockRecorder) CreatePendingMatch(ctx, match interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePendingMatch", reflect.TypeOf((*MockMatchRepo)(nil).CreatePendingMatch), ctx, match)
}

// DeleteRedisKey mocks base method.
func (m *MockMatchRepo) DeleteRedisKey(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRedisKey", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRedisKey indicates an expected call of DeleteRedisKey.
func (mr *MockMatchRepoMockRecorder) DeleteRedisKey(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRedisKey", reflect.TypeOf((*MockMatchRepo)(nil).DeleteRedisKey), ctx, key)
}

// FindNearbyDrivers mocks base method.
func (m *MockMatchRepo) FindNearbyDrivers(ctx context.Context, location *models.Location, radiusKm float64) ([]*models.NearbyUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNearbyDrivers", ctx, location, radiusKm)
	ret0, _ := ret[0].([]*models.NearbyUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNearbyDrivers indicates an expected call of FindNearbyDrivers.
func (mr *MockMatchRepoMockRecorder) FindNearbyDrivers(ctx, location, radiusKm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNearbyDrivers", reflect.TypeOf((*MockMatchRepo)(nil).FindNearbyDrivers), ctx, location, radiusKm)
}

// FindNearbyPassengers mocks base method.
func (m *MockMatchRepo) FindNearbyPassengers(ctx context.Context, location *models.Location, radiusKm float64) ([]*models.NearbyUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNearbyPassengers", ctx, location, radiusKm)
	ret0, _ := ret[0].([]*models.NearbyUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNearbyPassengers indicates an expected call of FindNearbyPassengers.
func (mr *MockMatchRepoMockRecorder) FindNearbyPassengers(ctx, location, radiusKm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNearbyPassengers", reflect.TypeOf((*MockMatchRepo)(nil).FindNearbyPassengers), ctx, location, radiusKm)
}

// GetMatch mocks base method.
func (m *MockMatchRepo) GetMatch(ctx context.Context, matchID string) (*models.Match, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatch", ctx, matchID)
	ret0, _ := ret[0].(*models.Match)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatch indicates an expected call of GetMatch.
func (mr *MockMatchRepoMockRecorder) GetMatch(ctx, matchID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatch", reflect.TypeOf((*MockMatchRepo)(nil).GetMatch), ctx, matchID)
}

// GetPendingMatchByID mocks base method.
func (m *MockMatchRepo) GetPendingMatchByID(ctx context.Context, matchID string) (*models.Match, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingMatchByID", ctx, matchID)
	ret0, _ := ret[0].(*models.Match)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingMatchByID indicates an expected call of GetPendingMatchByID.
func (mr *MockMatchRepoMockRecorder) GetPendingMatchByID(ctx, matchID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingMatchByID", reflect.TypeOf((*MockMatchRepo)(nil).GetPendingMatchByID), ctx, matchID)
}

// ListMatchesByDriver mocks base method.
func (m *MockMatchRepo) ListMatchesByDriver(ctx context.Context, driverID string) ([]*models.Match, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMatchesByDriver", ctx, driverID)
	ret0, _ := ret[0].([]*models.Match)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMatchesByDriver indicates an expected call of ListMatchesByDriver.
func (mr *MockMatchRepoMockRecorder) ListMatchesByDriver(ctx, driverID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMatchesByDriver", reflect.TypeOf((*MockMatchRepo)(nil).ListMatchesByDriver), ctx, driverID)
}

// ListMatchesByPassenger mocks base method.
func (m *MockMatchRepo) ListMatchesByPassenger(ctx context.Context, passengerID uuid.UUID) ([]*models.Match, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMatchesByPassenger", ctx, passengerID)
	ret0, _ := ret[0].([]*models.Match)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMatchesByPassenger indicates an expected call of ListMatchesByPassenger.
func (mr *MockMatchRepoMockRecorder) ListMatchesByPassenger(ctx, passengerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMatchesByPassenger", reflect.TypeOf((*MockMatchRepo)(nil).ListMatchesByPassenger), ctx, passengerID)
}

// ProcessLocationUpdate mocks base method.
func (m *MockMatchRepo) ProcessLocationUpdate(ctx context.Context, driverID string, location *models.Location) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessLocationUpdate", ctx, driverID, location)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessLocationUpdate indicates an expected call of ProcessLocationUpdate.
func (mr *MockMatchRepoMockRecorder) ProcessLocationUpdate(ctx, driverID, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessLocationUpdate", reflect.TypeOf((*MockMatchRepo)(nil).ProcessLocationUpdate), ctx, driverID, location)
}

// RemoveAvailableDriver mocks base method.
func (m *MockMatchRepo) RemoveAvailableDriver(ctx context.Context, driverID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAvailableDriver", ctx, driverID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAvailableDriver indicates an expected call of RemoveAvailableDriver.
func (mr *MockMatchRepoMockRecorder) RemoveAvailableDriver(ctx, driverID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAvailableDriver", reflect.TypeOf((*MockMatchRepo)(nil).RemoveAvailableDriver), ctx, driverID)
}

// RemoveAvailablePassenger mocks base method.
func (m *MockMatchRepo) RemoveAvailablePassenger(ctx context.Context, passengerID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAvailablePassenger", ctx, passengerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAvailablePassenger indicates an expected call of RemoveAvailablePassenger.
func (mr *MockMatchRepoMockRecorder) RemoveAvailablePassenger(ctx, passengerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAvailablePassenger", reflect.TypeOf((*MockMatchRepo)(nil).RemoveAvailablePassenger), ctx, passengerID)
}

// StoreMatchProposal mocks base method.
func (m *MockMatchRepo) StoreMatchProposal(ctx context.Context, match *models.Match) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreMatchProposal", ctx, match)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreMatchProposal indicates an expected call of StoreMatchProposal.
func (mr *MockMatchRepoMockRecorder) StoreMatchProposal(ctx, match interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreMatchProposal", reflect.TypeOf((*MockMatchRepo)(nil).StoreMatchProposal), ctx, match)
}

// UpdateMatchStatus mocks base method.
func (m *MockMatchRepo) UpdateMatchStatus(ctx context.Context, matchID string, status models.MatchStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMatchStatus", ctx, matchID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMatchStatus indicates an expected call of UpdateMatchStatus.
func (mr *MockMatchRepoMockRecorder) UpdateMatchStatus(ctx, matchID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMatchStatus", reflect.TypeOf((*MockMatchRepo)(nil).UpdateMatchStatus), ctx, matchID, status)
}

// StoreIDMapping mocks base method.
func (m *MockMatchRepo) StoreIDMapping(ctx context.Context, key string, value string, expiration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreIDMapping", ctx, key, value, expiration)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreIDMapping indicates an expected call of StoreIDMapping.
func (mr *MockMatchRepoMockRecorder) StoreIDMapping(ctx, key, value, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreIDMapping", reflect.TypeOf((*MockMatchRepo)(nil).StoreIDMapping), ctx, key, value, expiration)
}

// GetIDMapping mocks base method.
func (m *MockMatchRepo) GetIDMapping(ctx context.Context, originalID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIDMapping", ctx, originalID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIDMapping indicates an expected call of GetIDMapping.
func (mr *MockMatchRepoMockRecorder) GetIDMapping(ctx, originalID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIDMapping", reflect.TypeOf((*MockMatchRepo)(nil).GetIDMapping), ctx, originalID)
}

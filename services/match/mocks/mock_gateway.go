// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/piresc/nebengjek/services/match (interfaces: MatchGW)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/piresc/nebengjek/internal/pkg/models"
)

// MockMatchGW is a mock of MatchGW interface.
type MockMatchGW struct {
	ctrl     *gomock.Controller
	recorder *MockMatchGWMockRecorder
}

// MockMatchGWMockRecorder is the mock recorder for MockMatchGW.
type MockMatchGWMockRecorder struct {
	mock *MockMatchGW
}

// NewMockMatchGW creates a new mock instance.
func NewMockMatchGW(ctrl *gomock.Controller) *MockMatchGW {
	mock := &MockMatchGW{ctrl: ctrl}
	mock.recorder = &MockMatchGWMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMatchGW) EXPECT() *MockMatchGWMockRecorder {
	return m.recorder
}

// AddAvailableDriver mocks base method.
func (m *MockMatchGW) AddAvailableDriver(arg0 context.Context, arg1 string, arg2 *models.Location) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAvailableDriver", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAvailableDriver indicates an expected call of AddAvailableDriver.
func (mr *MockMatchGWMockRecorder) AddAvailableDriver(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAvailableDriver", reflect.TypeOf((*MockMatchGW)(nil).AddAvailableDriver), arg0, arg1, arg2)
}

// AddAvailablePassenger mocks base method.
func (m *MockMatchGW) AddAvailablePassenger(arg0 context.Context, arg1 string, arg2 *models.Location) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAvailablePassenger", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAvailablePassenger indicates an expected call of AddAvailablePassenger.
func (mr *MockMatchGWMockRecorder) AddAvailablePassenger(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAvailablePassenger", reflect.TypeOf((*MockMatchGW)(nil).AddAvailablePassenger), arg0, arg1, arg2)
}

// FindNearbyDrivers mocks base method.
func (m *MockMatchGW) FindNearbyDrivers(arg0 context.Context, arg1 *models.Location, arg2 float64) ([]*models.NearbyUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNearbyDrivers", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*models.NearbyUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNearbyDrivers indicates an expected call of FindNearbyDrivers.
func (mr *MockMatchGWMockRecorder) FindNearbyDrivers(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNearbyDrivers", reflect.TypeOf((*MockMatchGW)(nil).FindNearbyDrivers), arg0, arg1, arg2)
}

// GetDriverLocation mocks base method.
func (m *MockMatchGW) GetDriverLocation(arg0 context.Context, arg1 string) (models.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDriverLocation", arg0, arg1)
	ret0, _ := ret[0].(models.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDriverLocation indicates an expected call of GetDriverLocation.
func (mr *MockMatchGWMockRecorder) GetDriverLocation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDriverLocation", reflect.TypeOf((*MockMatchGW)(nil).GetDriverLocation), arg0, arg1)
}

// GetPassengerLocation mocks base method.
func (m *MockMatchGW) GetPassengerLocation(arg0 context.Context, arg1 string) (models.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPassengerLocation", arg0, arg1)
	ret0, _ := ret[0].(models.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPassengerLocation indicates an expected call of GetPassengerLocation.
func (mr *MockMatchGWMockRecorder) GetPassengerLocation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPassengerLocation", reflect.TypeOf((*MockMatchGW)(nil).GetPassengerLocation), arg0, arg1)
}

// PublishMatchAccepted mocks base method.
func (m *MockMatchGW) PublishMatchAccepted(arg0 context.Context, arg1 models.MatchProposal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishMatchAccepted", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishMatchAccepted indicates an expected call of PublishMatchAccepted.
func (mr *MockMatchGWMockRecorder) PublishMatchAccepted(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishMatchAccepted", reflect.TypeOf((*MockMatchGW)(nil).PublishMatchAccepted), arg0, arg1)
}

// PublishMatchFound mocks base method.
func (m *MockMatchGW) PublishMatchFound(arg0 context.Context, arg1 models.MatchProposal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishMatchFound", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishMatchFound indicates an expected call of PublishMatchFound.
func (mr *MockMatchGWMockRecorder) PublishMatchFound(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishMatchFound", reflect.TypeOf((*MockMatchGW)(nil).PublishMatchFound), arg0, arg1)
}

// PublishMatchRejected mocks base method.
func (m *MockMatchGW) PublishMatchRejected(arg0 context.Context, arg1 models.MatchProposal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishMatchRejected", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishMatchRejected indicates an expected call of PublishMatchRejected.
func (mr *MockMatchGWMockRecorder) PublishMatchRejected(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishMatchRejected", reflect.TypeOf((*MockMatchGW)(nil).PublishMatchRejected), arg0, arg1)
}

// RemoveAvailableDriver mocks base method.
func (m *MockMatchGW) RemoveAvailableDriver(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAvailableDriver", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAvailableDriver indicates an expected call of RemoveAvailableDriver.
func (mr *MockMatchGWMockRecorder) RemoveAvailableDriver(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAvailableDriver", reflect.TypeOf((*MockMatchGW)(nil).RemoveAvailableDriver), arg0, arg1)
}

// RemoveAvailablePassenger mocks base method.
func (m *MockMatchGW) RemoveAvailablePassenger(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAvailablePassenger", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAvailablePassenger indicates an expected call of RemoveAvailablePassenger.
func (mr *MockMatchGWMockRecorder) RemoveAvailablePassenger(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAvailablePassenger", reflect.TypeOf((*MockMatchGW)(nil).RemoveAvailablePassenger), arg0, arg1)
}

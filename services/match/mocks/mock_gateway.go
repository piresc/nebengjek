// Code generated by MockGen. DO NOT EDIT.
// Source: services/match/gateways.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/piresc/nebengjek/internal/pkg/models"
)

// MockMatchGW is a mock of MatchGW interface.
type MockMatchGW struct {
	ctrl     *gomock.Controller
	recorder *MockMatchGWMockRecorder
}

// MockMatchGWMockRecorder is the mock recorder for MockMatchGW.
type MockMatchGWMockRecorder struct {
	mock *MockMatchGW
}

// NewMockMatchGW creates a new mock instance.
func NewMockMatchGW(ctrl *gomock.Controller) *MockMatchGW {
	mock := &MockMatchGW{ctrl: ctrl}
	mock.recorder = &MockMatchGWMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMatchGW) EXPECT() *MockMatchGWMockRecorder {
	return m.recorder
}

// PublishMatchFound mocks base method.
func (m *MockMatchGW) PublishMatchFound(ctx context.Context, matchProp models.MatchProposal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishMatchFound", ctx, matchProp)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishMatchFound indicates an expected call of PublishMatchFound.
func (mr *MockMatchGWMockRecorder) PublishMatchFound(ctx, matchProp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishMatchFound", reflect.TypeOf((*MockMatchGW)(nil).PublishMatchFound), ctx, matchProp)
}

// PublishMatchConfirm mocks base method.
func (m *MockMatchGW) PublishMatchConfirm(ctx context.Context, matchProp models.MatchProposal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishMatchConfirm", ctx, matchProp)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishMatchConfirm indicates an expected call of PublishMatchConfirm.
func (mr *MockMatchGWMockRecorder) PublishMatchConfirm(ctx, matchProp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishMatchConfirm", reflect.TypeOf((*MockMatchGW)(nil).PublishMatchConfirm), ctx, matchProp)
}

// PublishMatchRejected mocks base method.
func (m *MockMatchGW) PublishMatchRejected(ctx context.Context, matchProp models.MatchProposal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishMatchRejected", ctx, matchProp)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishMatchRejected indicates an expected call of PublishMatchRejected.
func (mr *MockMatchGWMockRecorder) PublishMatchRejected(ctx, matchProp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishMatchRejected", reflect.TypeOf((*MockMatchGW)(nil).PublishMatchRejected), ctx, matchProp)
}

// PublishMatchAccepted mocks base method.
func (m *MockMatchGW) PublishMatchAccepted(ctx context.Context, matchProp models.MatchProposal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishMatchAccepted", ctx, matchProp)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishMatchAccepted indicates an expected call of PublishMatchAccepted.
func (mr *MockMatchGWMockRecorder) PublishMatchAccepted(ctx, matchProp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishMatchAccepted", reflect.TypeOf((*MockMatchGW)(nil).PublishMatchAccepted), ctx, matchProp)
}
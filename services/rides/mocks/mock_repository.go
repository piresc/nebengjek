// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/piresc/nebengjek/services/rides (interfaces: RideRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/piresc/nebengjek/internal/pkg/models"
)

// MockRideRepo is a mock of RideRepo interface.
type MockRideRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRideRepoMockRecorder
}

// MockRideRepoMockRecorder is the mock recorder for MockRideRepo.
type MockRideRepoMockRecorder struct {
	mock *MockRideRepo
}

// NewMockRideRepo creates a new mock instance.
func NewMockRideRepo(ctrl *gomock.Controller) *MockRideRepo {
	mock := &MockRideRepo{ctrl: ctrl}
	mock.recorder = &MockRideRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRideRepo) EXPECT() *MockRideRepoMockRecorder {
	return m.recorder
}

// AddBillingEntry mocks base method.
func (m *MockRideRepo) AddBillingEntry(arg0 context.Context, arg1 *models.BillingLedger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBillingEntry", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBillingEntry indicates an expected call of AddBillingEntry.
func (mr *MockRideRepoMockRecorder) AddBillingEntry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBillingEntry", reflect.TypeOf((*MockRideRepo)(nil).AddBillingEntry), arg0, arg1)
}

// CompleteRide mocks base method.
func (m *MockRideRepo) CompleteRide(arg0 context.Context, arg1 *models.Ride) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteRide", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteRide indicates an expected call of CompleteRide.
func (mr *MockRideRepoMockRecorder) CompleteRide(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteRide", reflect.TypeOf((*MockRideRepo)(nil).CompleteRide), arg0, arg1)
}

// CreatePayment mocks base method.
func (m *MockRideRepo) CreatePayment(arg0 context.Context, arg1 *models.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePayment indicates an expected call of CreatePayment.
func (mr *MockRideRepoMockRecorder) CreatePayment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayment", reflect.TypeOf((*MockRideRepo)(nil).CreatePayment), arg0, arg1)
}

// CreateRide mocks base method.
func (m *MockRideRepo) CreateRide(arg0 *models.Ride) (*models.Ride, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRide", arg0)
	ret0, _ := ret[0].(*models.Ride)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRide indicates an expected call of CreateRide.
func (mr *MockRideRepoMockRecorder) CreateRide(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRide", reflect.TypeOf((*MockRideRepo)(nil).CreateRide), arg0)
}

// GetBillingLedgerSum mocks base method.
func (m *MockRideRepo) GetBillingLedgerSum(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBillingLedgerSum", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBillingLedgerSum indicates an expected call of GetBillingLedgerSum.
func (mr *MockRideRepoMockRecorder) GetBillingLedgerSum(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBillingLedgerSum", reflect.TypeOf((*MockRideRepo)(nil).GetBillingLedgerSum), arg0, arg1)
}

// GetPaymentByRideID mocks base method.
func (m *MockRideRepo) GetPaymentByRideID(arg0 context.Context, arg1 string) (*models.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentByRideID", arg0, arg1)
	ret0, _ := ret[0].(*models.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentByRideID indicates an expected call of GetPaymentByRideID.
func (mr *MockRideRepoMockRecorder) GetPaymentByRideID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentByRideID", reflect.TypeOf((*MockRideRepo)(nil).GetPaymentByRideID), arg0, arg1)
}

// GetRide mocks base method.
func (m *MockRideRepo) GetRide(arg0 context.Context, arg1 string) (*models.Ride, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRide", arg0, arg1)
	ret0, _ := ret[0].(*models.Ride)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRide indicates an expected call of GetRide.
func (mr *MockRideRepoMockRecorder) GetRide(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRide", reflect.TypeOf((*MockRideRepo)(nil).GetRide), arg0, arg1)
}

// UpdatePaymentStatus mocks base method.
func (m *MockRideRepo) UpdatePaymentStatus(arg0 context.Context, arg1 string, arg2 models.PaymentStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePaymentStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePaymentStatus indicates an expected call of UpdatePaymentStatus.
func (mr *MockRideRepoMockRecorder) UpdatePaymentStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePaymentStatus", reflect.TypeOf((*MockRideRepo)(nil).UpdatePaymentStatus), arg0, arg1, arg2)
}

// UpdateRideStatus mocks base method.
func (m *MockRideRepo) UpdateRideStatus(arg0 context.Context, arg1 string, arg2 models.RideStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRideStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRideStatus indicates an expected call of UpdateRideStatus.
func (mr *MockRideRepoMockRecorder) UpdateRideStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRideStatus", reflect.TypeOf((*MockRideRepo)(nil).UpdateRideStatus), arg0, arg1, arg2)
}

// UpdateTotalCost mocks base method.
func (m *MockRideRepo) UpdateTotalCost(arg0 context.Context, arg1 string, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTotalCost", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTotalCost indicates an expected call of UpdateTotalCost.
func (mr *MockRideRepoMockRecorder) UpdateTotalCost(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTotalCost", reflect.TypeOf((*MockRideRepo)(nil).UpdateTotalCost), arg0, arg1, arg2)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: services/rides/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/piresc/nebengjek/internal/pkg/models"
)

// MockRideRepo is a mock of RideRepo interface.
type MockRideRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRideRepoMockRecorder
}

// MockRideRepoMockRecorder is the mock recorder for MockRideRepo.
type MockRideRepoMockRecorder struct {
	mock *MockRideRepo
}

// NewMockRideRepo creates a new mock instance.
func NewMockRideRepo(ctrl *gomock.Controller) *MockRideRepo {
	mock := &MockRideRepo{ctrl: ctrl}
	mock.recorder = &MockRideRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRideRepo) EXPECT() *MockRideRepoMockRecorder {
	return m.recorder
}

// AddBillingEntry mocks base method.
func (m *MockRideRepo) AddBillingEntry(ctx context.Context, entry *models.BillingLedger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBillingEntry", ctx, entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBillingEntry indicates an expected call of AddBillingEntry.
func (mr *MockRideRepoMockRecorder) AddBillingEntry(ctx, entry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBillingEntry", reflect.TypeOf((*MockRideRepo)(nil).AddBillingEntry), ctx, entry)
}

// CompleteRide mocks base method.
func (m *MockRideRepo) CompleteRide(ctx context.Context, ride *models.Ride) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteRide", ctx, ride)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteRide indicates an expected call of CompleteRide.
func (mr *MockRideRepoMockRecorder) CompleteRide(ctx, ride interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteRide", reflect.TypeOf((*MockRideRepo)(nil).CompleteRide), ctx, ride)
}

// CreatePayment mocks base method.
func (m *MockRideRepo) CreatePayment(ctx context.Context, payment *models.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayment", ctx, payment)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePayment indicates an expected call of CreatePayment.
func (mr *MockRideRepoMockRecorder) CreatePayment(ctx, payment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayment", reflect.TypeOf((*MockRideRepo)(nil).CreatePayment), ctx, payment)
}

// CreateRide mocks base method.
func (m *MockRideRepo) CreateRide(ride *models.Ride) (*models.Ride, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRide", ride)
	ret0, _ := ret[0].(*models.Ride)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRide indicates an expected call of CreateRide.
func (mr *MockRideRepoMockRecorder) CreateRide(ride interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRide", reflect.TypeOf((*MockRideRepo)(nil).CreateRide), ride)
}

// GetBillingLedgerSum mocks base method.
func (m *MockRideRepo) GetBillingLedgerSum(ctx context.Context, rideID string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBillingLedgerSum", ctx, rideID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBillingLedgerSum indicates an expected call of GetBillingLedgerSum.
func (mr *MockRideRepoMockRecorder) GetBillingLedgerSum(ctx, rideID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBillingLedgerSum", reflect.TypeOf((*MockRideRepo)(nil).GetBillingLedgerSum), ctx, rideID)
}

// GetRide mocks base method.
func (m *MockRideRepo) GetRide(ctx context.Context, rideID string) (*models.Ride, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRide", ctx, rideID)
	ret0, _ := ret[0].(*models.Ride)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRide indicates an expected call of GetRide.
func (mr *MockRideRepoMockRecorder) GetRide(ctx, rideID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRide", reflect.TypeOf((*MockRideRepo)(nil).GetRide), ctx, rideID)
}

// UpdateTotalCost mocks base method.
func (m *MockRideRepo) UpdateTotalCost(ctx context.Context, rideID string, additionalCost int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTotalCost", ctx, rideID, additionalCost)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTotalCost indicates an expected call of UpdateTotalCost.
func (mr *MockRideRepoMockRecorder) UpdateTotalCost(ctx, rideID, additionalCost interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTotalCost", reflect.TypeOf((*MockRideRepo)(nil).UpdateTotalCost), ctx, rideID, additionalCost)
}

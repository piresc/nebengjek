// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/piresc/nebengjek/services/rides (interfaces: RideUC)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/piresc/nebengjek/internal/pkg/models"
)

// MockRideUC is a mock of RideUC interface.
type MockRideUC struct {
	ctrl     *gomock.Controller
	recorder *MockRideUCMockRecorder
}

// MockRideUCMockRecorder is the mock recorder for MockRideUC.
type MockRideUCMockRecorder struct {
	mock *MockRideUC
}

// NewMockRideUC creates a new mock instance.
func NewMockRideUC(ctrl *gomock.Controller) *MockRideUC {
	mock := &MockRideUC{ctrl: ctrl}
	mock.recorder = &MockRideUCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRideUC) EXPECT() *MockRideUCMockRecorder {
	return m.recorder
}

// CreateRide mocks base method.
func (m *MockRideUC) CreateRide(arg0 context.Context, arg1 models.MatchProposal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRide", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRide indicates an expected call of CreateRide.
func (mr *MockRideUCMockRecorder) CreateRide(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRide", reflect.TypeOf((*MockRideUC)(nil).CreateRide), arg0, arg1)
}

// ProcessBillingUpdate mocks base method.
func (m *MockRideUC) ProcessBillingUpdate(arg0 context.Context, arg1 string, arg2 *models.BillingLedger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessBillingUpdate", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessBillingUpdate indicates an expected call of ProcessBillingUpdate.
func (mr *MockRideUCMockRecorder) ProcessBillingUpdate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessBillingUpdate", reflect.TypeOf((*MockRideUC)(nil).ProcessBillingUpdate), arg0, arg1, arg2)
}

// ProcessPayment mocks base method.
func (m *MockRideUC) ProcessPayment(arg0 context.Context, arg1 models.PaymentProccessRequest) (*models.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessPayment", arg0, arg1)
	ret0, _ := ret[0].(*models.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessPayment indicates an expected call of ProcessPayment.
func (mr *MockRideUCMockRecorder) ProcessPayment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessPayment", reflect.TypeOf((*MockRideUC)(nil).ProcessPayment), arg0, arg1)
}

// RideArrived mocks base method.
func (m *MockRideUC) RideArrived(arg0 context.Context, arg1 models.RideArrivalReq) (*models.PaymentRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RideArrived", arg0, arg1)
	ret0, _ := ret[0].(*models.PaymentRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RideArrived indicates an expected call of RideArrived.
func (mr *MockRideUCMockRecorder) RideArrived(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RideArrived", reflect.TypeOf((*MockRideUC)(nil).RideArrived), arg0, arg1)
}

// StartRide mocks base method.
func (m *MockRideUC) StartRide(arg0 context.Context, arg1 models.RideStartRequest) (*models.Ride, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartRide", arg0, arg1)
	ret0, _ := ret[0].(*models.Ride)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartRide indicates an expected call of StartRide.
func (mr *MockRideUCMockRecorder) StartRide(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartRide", reflect.TypeOf((*MockRideUC)(nil).StartRide), arg0, arg1)
}

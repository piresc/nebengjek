// Code generated by MockGen. DO NOT EDIT.
// Source: services/rides/usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/piresc/nebengjek/internal/pkg/models"
)

// MockRideUC is a mock of RideUC interface.
type MockRideUC struct {
	ctrl     *gomock.Controller
	recorder *MockRideUCMockRecorder
}

// MockRideUCMockRecorder is the mock recorder for MockRideUC.
type MockRideUCMockRecorder struct {
	mock *MockRideUC
}

// NewMockRideUC creates a new mock instance.
func NewMockRideUC(ctrl *gomock.Controller) *MockRideUC {
	mock := &MockRideUC{ctrl: ctrl}
	mock.recorder = &MockRideUCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRideUC) EXPECT() *MockRideUCMockRecorder {
	return m.recorder
}

// CompleteRide mocks base method.
func (m *MockRideUC) CompleteRide(rideID string, adjustmentFactor float64) (*models.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteRide", rideID, adjustmentFactor)
	ret0, _ := ret[0].(*models.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteRide indicates an expected call of CompleteRide.
func (mr *MockRideUCMockRecorder) CompleteRide(rideID, adjustmentFactor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteRide", reflect.TypeOf((*MockRideUC)(nil).CompleteRide), rideID, adjustmentFactor)
}

// CreateRide mocks base method.
func (m *MockRideUC) CreateRide(mp models.MatchProposal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRide", mp)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRide indicates an expected call of CreateRide.
func (mr *MockRideUCMockRecorder) CreateRide(mp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRide", reflect.TypeOf((*MockRideUC)(nil).CreateRide), mp)
}

// ProcessBillingUpdate mocks base method.
func (m *MockRideUC) ProcessBillingUpdate(rideID string, entry *models.BillingLedger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessBillingUpdate", rideID, entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessBillingUpdate indicates an expected call of ProcessBillingUpdate.
func (mr *MockRideUCMockRecorder) ProcessBillingUpdate(rideID, entry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessBillingUpdate", reflect.TypeOf((*MockRideUC)(nil).ProcessBillingUpdate), rideID, entry)
}

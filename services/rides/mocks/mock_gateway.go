// Code generated by MockGen. DO NOT EDIT.
// Source: services/rides/gateway.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/piresc/nebengjek/internal/pkg/models"
)

// MockRideGW is a mock of RideGW interface.
type MockRideGW struct {
	ctrl     *gomock.Controller
	recorder *MockRideGWMockRecorder
}

// MockRideGWMockRecorder is the mock recorder for MockRideGW.
type MockRideGWMockRecorder struct {
	mock *MockRideGW
}

// NewMockRideGW creates a new mock instance.
func NewMockRideGW(ctrl *gomock.Controller) *MockRideGW {
	mock := &MockRideGW{ctrl: ctrl}
	mock.recorder = &MockRideGWMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRideGW) EXPECT() *MockRideGWMockRecorder {
	return m.recorder
}

// PublishRideCompleted mocks base method.
func (m *MockRideGW) PublishRideCompleted(ctx context.Context, ride models.RideComplete) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishRideCompleted", ctx, ride)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishRideCompleted indicates an expected call of PublishRideCompleted.
func (mr *MockRideGWMockRecorder) PublishRideCompleted(ctx, ride interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishRideCompleted", reflect.TypeOf((*MockRideGW)(nil).PublishRideCompleted), ctx, ride)
}

// PublishRideStarted mocks base method.
func (m *MockRideGW) PublishRideStarted(ctx context.Context, ride *models.Ride) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishRideStarted", ctx, ride)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishRideStarted indicates an expected call of PublishRideStarted.
func (mr *MockRideGWMockRecorder) PublishRideStarted(ctx, ride interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishRideStarted", reflect.TypeOf((*MockRideGW)(nil).PublishRideStarted), ctx, ride)
}

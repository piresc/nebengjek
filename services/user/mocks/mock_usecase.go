// Code generated by MockGen. DO NOT EDIT.
// Source: ./services/user/usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/piresc/nebengjek/internal/pkg/models"
)

// MockUserUC is a mock of UserUC interface.
type MockUserUC struct {
	ctrl     *gomock.Controller
	recorder *MockUserUCMockRecorder
}

// MockUserUCMockRecorder is the mock recorder for MockUserUC.
type MockUserUCMockRecorder struct {
	mock *MockUserUC
}

// NewMockUserUC creates a new mock instance.
func NewMockUserUC(ctrl *gomock.Controller) *MockUserUC {
	mock := &MockUserUC{ctrl: ctrl}
	mock.recorder = &MockUserUCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUC) EXPECT() *MockUserUCMockRecorder {
	return m.recorder
}

// ConfirmMatch mocks base method.
func (m *MockUserUC) ConfirmMatch(ctx context.Context, mp *models.MatchProposal, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmMatch", ctx, mp, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfirmMatch indicates an expected call of ConfirmMatch.
func (mr *MockUserUCMockRecorder) ConfirmMatch(ctx, mp, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmMatch", reflect.TypeOf((*MockUserUC)(nil).ConfirmMatch), ctx, mp, userID)
}

// GenerateOTP mocks base method.
func (m *MockUserUC) GenerateOTP(ctx context.Context, msisdn string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateOTP", ctx, msisdn)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateOTP indicates an expected call of GenerateOTP.
func (mr *MockUserUCMockRecorder) GenerateOTP(ctx, msisdn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateOTP", reflect.TypeOf((*MockUserUC)(nil).GenerateOTP), ctx, msisdn)
}

// GetUserByID mocks base method.
func (m *MockUserUC) GetUserByID(ctx context.Context, id string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserUCMockRecorder) GetUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserUC)(nil).GetUserByID), ctx, id)
}

// RegisterDriver mocks base method.
func (m *MockUserUC) RegisterDriver(ctx context.Context, user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterDriver", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterDriver indicates an expected call of RegisterDriver.
func (mr *MockUserUCMockRecorder) RegisterDriver(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterDriver", reflect.TypeOf((*MockUserUC)(nil).RegisterDriver), ctx, user)
}

// RegisterUser mocks base method.
func (m *MockUserUC) RegisterUser(ctx context.Context, user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockUserUCMockRecorder) RegisterUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockUserUC)(nil).RegisterUser), ctx, user)
}

// RideArrived mocks base method.
func (m *MockUserUC) RideArrived(ctx context.Context, event *models.RideCompleteEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RideArrived", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// RideArrived indicates an expected call of RideArrived.
func (mr *MockUserUCMockRecorder) RideArrived(ctx, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RideArrived", reflect.TypeOf((*MockUserUC)(nil).RideArrived), ctx, event)
}

// UpdateBeaconStatus mocks base method.
func (m *MockUserUC) UpdateBeaconStatus(ctx context.Context, beaconReq *models.BeaconRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBeaconStatus", ctx, beaconReq)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBeaconStatus indicates an expected call of UpdateBeaconStatus.
func (mr *MockUserUCMockRecorder) UpdateBeaconStatus(ctx, beaconReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBeaconStatus", reflect.TypeOf((*MockUserUC)(nil).UpdateBeaconStatus), ctx, beaconReq)
}

// UpdateUserLocation mocks base method.
func (m *MockUserUC) UpdateUserLocation(ctx context.Context, location *models.LocationUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserLocation", ctx, location)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserLocation indicates an expected call of UpdateUserLocation.
func (mr *MockUserUCMockRecorder) UpdateUserLocation(ctx, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserLocation", reflect.TypeOf((*MockUserUC)(nil).UpdateUserLocation), ctx, location)
}

// VerifyOTP mocks base method.
func (m *MockUserUC) VerifyOTP(ctx context.Context, msisdn, otp string) (*models.AuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyOTP", ctx, msisdn, otp)
	ret0, _ := ret[0].(*models.AuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyOTP indicates an expected call of VerifyOTP.
func (mr *MockUserUCMockRecorder) VerifyOTP(ctx, msisdn, otp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyOTP", reflect.TypeOf((*MockUserUC)(nil).VerifyOTP), ctx, msisdn, otp)
}

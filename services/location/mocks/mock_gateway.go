// Code generated by MockGen. DO NOT EDIT.
// Source: services/location/gateway.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/piresc/nebengjek/internal/pkg/models"
)

// MockLocationGW is a mock of LocationGW interface.
type MockLocationGW struct {
	ctrl     *gomock.Controller
	recorder *MockLocationGWMockRecorder
}

// MockLocationGWMockRecorder is the mock recorder for MockLocationGW.
type MockLocationGWMockRecorder struct {
	mock *MockLocationGW
}

// NewMockLocationGW creates a new mock instance.
func NewMockLocationGW(ctrl *gomock.Controller) *MockLocationGW {
	mock := &MockLocationGW{ctrl: ctrl}
	mock.recorder = &MockLocationGWMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocationGW) EXPECT() *MockLocationGWMockRecorder {
	return m.recorder
}

// PublishLocationAggregate mocks base method.
func (m *MockLocationGW) PublishLocationAggregate(ctx context.Context, aggregate models.LocationAggregate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishLocationAggregate", ctx, aggregate)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishLocationAggregate indicates an expected call of PublishLocationAggregate.
func (mr *MockLocationGWMockRecorder) PublishLocationAggregate(ctx, aggregate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishLocationAggregate", reflect.TypeOf((*MockLocationGW)(nil).PublishLocationAggregate), ctx, aggregate)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/piresc/nebengjek/services/location (interfaces: LocationRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/piresc/nebengjek/internal/pkg/models"
)

// MockLocationRepo is a mock of LocationRepo interface.
type MockLocationRepo struct {
	ctrl     *gomock.Controller
	recorder *MockLocationRepoMockRecorder
}

// MockLocationRepoMockRecorder is the mock recorder for MockLocationRepo.
type MockLocationRepoMockRecorder struct {
	mock *MockLocationRepo
}

// NewMockLocationRepo creates a new mock instance.
func NewMockLocationRepo(ctrl *gomock.Controller) *MockLocationRepo {
	mock := &MockLocationRepo{ctrl: ctrl}
	mock.recorder = &MockLocationRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocationRepo) EXPECT() *MockLocationRepoMockRecorder {
	return m.recorder
}

// AddAvailableDriver mocks base method.
func (m *MockLocationRepo) AddAvailableDriver(arg0 context.Context, arg1 string, arg2 *models.Location) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAvailableDriver", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAvailableDriver indicates an expected call of AddAvailableDriver.
func (mr *MockLocationRepoMockRecorder) AddAvailableDriver(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAvailableDriver", reflect.TypeOf((*MockLocationRepo)(nil).AddAvailableDriver), arg0, arg1, arg2)
}

// AddAvailablePassenger mocks base method.
func (m *MockLocationRepo) AddAvailablePassenger(arg0 context.Context, arg1 string, arg2 *models.Location) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAvailablePassenger", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAvailablePassenger indicates an expected call of AddAvailablePassenger.
func (mr *MockLocationRepoMockRecorder) AddAvailablePassenger(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAvailablePassenger", reflect.TypeOf((*MockLocationRepo)(nil).AddAvailablePassenger), arg0, arg1, arg2)
}

// FindNearbyDrivers mocks base method.
func (m *MockLocationRepo) FindNearbyDrivers(arg0 context.Context, arg1 *models.Location, arg2 float64) ([]*models.NearbyUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNearbyDrivers", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*models.NearbyUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNearbyDrivers indicates an expected call of FindNearbyDrivers.
func (mr *MockLocationRepoMockRecorder) FindNearbyDrivers(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNearbyDrivers", reflect.TypeOf((*MockLocationRepo)(nil).FindNearbyDrivers), arg0, arg1, arg2)
}

// GetDriverLocation mocks base method.
func (m *MockLocationRepo) GetDriverLocation(arg0 context.Context, arg1 string) (models.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDriverLocation", arg0, arg1)
	ret0, _ := ret[0].(models.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDriverLocation indicates an expected call of GetDriverLocation.
func (mr *MockLocationRepoMockRecorder) GetDriverLocation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDriverLocation", reflect.TypeOf((*MockLocationRepo)(nil).GetDriverLocation), arg0, arg1)
}

// GetLastLocation mocks base method.
func (m *MockLocationRepo) GetLastLocation(arg0 context.Context, arg1 string) (*models.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastLocation", arg0, arg1)
	ret0, _ := ret[0].(*models.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastLocation indicates an expected call of GetLastLocation.
func (mr *MockLocationRepoMockRecorder) GetLastLocation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastLocation", reflect.TypeOf((*MockLocationRepo)(nil).GetLastLocation), arg0, arg1)
}

// GetPassengerLocation mocks base method.
func (m *MockLocationRepo) GetPassengerLocation(arg0 context.Context, arg1 string) (models.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPassengerLocation", arg0, arg1)
	ret0, _ := ret[0].(models.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPassengerLocation indicates an expected call of GetPassengerLocation.
func (mr *MockLocationRepoMockRecorder) GetPassengerLocation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPassengerLocation", reflect.TypeOf((*MockLocationRepo)(nil).GetPassengerLocation), arg0, arg1)
}

// RemoveAvailableDriver mocks base method.
func (m *MockLocationRepo) RemoveAvailableDriver(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAvailableDriver", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAvailableDriver indicates an expected call of RemoveAvailableDriver.
func (mr *MockLocationRepoMockRecorder) RemoveAvailableDriver(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAvailableDriver", reflect.TypeOf((*MockLocationRepo)(nil).RemoveAvailableDriver), arg0, arg1)
}

// RemoveAvailablePassenger mocks base method.
func (m *MockLocationRepo) RemoveAvailablePassenger(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAvailablePassenger", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAvailablePassenger indicates an expected call of RemoveAvailablePassenger.
func (mr *MockLocationRepoMockRecorder) RemoveAvailablePassenger(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAvailablePassenger", reflect.TypeOf((*MockLocationRepo)(nil).RemoveAvailablePassenger), arg0, arg1)
}

// StoreLocation mocks base method.
func (m *MockLocationRepo) StoreLocation(arg0 context.Context, arg1 string, arg2 models.Location) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreLocation", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreLocation indicates an expected call of StoreLocation.
func (mr *MockLocationRepoMockRecorder) StoreLocation(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreLocation", reflect.TypeOf((*MockLocationRepo)(nil).StoreLocation), arg0, arg1, arg2)
}

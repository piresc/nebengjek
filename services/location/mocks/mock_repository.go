// Code generated by MockGen. DO NOT EDIT.
// Source: ./services/location/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/piresc/nebengjek/internal/pkg/models"
)

// MockLocationRepo is a mock of LocationRepo interface.
type MockLocationRepo struct {
	ctrl     *gomock.Controller
	recorder *MockLocationRepoMockRecorder
}

// MockLocationRepoMockRecorder is the mock recorder for MockLocationRepo.
type MockLocationRepoMockRecorder struct {
	mock *MockLocationRepo
}

// NewMockLocationRepo creates a new mock instance.
func NewMockLocationRepo(ctrl *gomock.Controller) *MockLocationRepo {
	mock := &MockLocationRepo{ctrl: ctrl}
	mock.recorder = &MockLocationRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocationRepo) EXPECT() *MockLocationRepoMockRecorder {
	return m.recorder
}

// GetLastLocation mocks base method.
func (m *MockLocationRepo) GetLastLocation(ctx context.Context, rideID string) (*models.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastLocation", ctx, rideID)
	ret0, _ := ret[0].(*models.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastLocation indicates an expected call of GetLastLocation.
func (mr *MockLocationRepoMockRecorder) GetLastLocation(ctx, rideID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastLocation", reflect.TypeOf((*MockLocationRepo)(nil).GetLastLocation), ctx, rideID)
}

// StoreLocation mocks base method.
func (m *MockLocationRepo) StoreLocation(ctx context.Context, rideID string, location models.Location) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreLocation", ctx, rideID, location)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreLocation indicates an expected call of StoreLocation.
func (mr *MockLocationRepoMockRecorder) StoreLocation(ctx, rideID, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreLocation", reflect.TypeOf((*MockLocationRepo)(nil).StoreLocation), ctx, rideID, location)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: services/location/usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/piresc/nebengjek/internal/pkg/models"
)

// MockLocationUC is a mock of LocationUC interface.
type MockLocationUC struct {
	ctrl     *gomock.Controller
	recorder *MockLocationUCMockRecorder
}

// MockLocationUCMockRecorder is the mock recorder for MockLocationUC.
type MockLocationUCMockRecorder struct {
	mock *MockLocationUC
}

// NewMockLocationUC creates a new mock instance.
func NewMockLocationUC(ctrl *gomock.Controller) *MockLocationUC {
	mock := &MockLocationUC{ctrl: ctrl}
	mock.recorder = &MockLocationUCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocationUC) EXPECT() *MockLocationUCMockRecorder {
	return m.recorder
}

// StoreLocation mocks base method.
func (m *MockLocationUC) StoreLocation(location models.LocationUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreLocation", location)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreLocation indicates an expected call of StoreLocation.
func (mr *MockLocationUCMockRecorder) StoreLocation(location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreLocation", reflect.TypeOf((*MockLocationUC)(nil).StoreLocation), location)
}

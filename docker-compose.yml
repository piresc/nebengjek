version: '3.8'

services:
  # API Gateway with Nginx
  api-gateway:
    image: nginx:1.23-alpine
    container_name: nebengjek-api-gateway
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/ssl:/etc/nginx/ssl:ro
      - ./infrastructure/jwt:/etc/nginx/jwt:ro
    depends_on:
      - user-service
      - location-service
      - match-service
      - rides-service
    networks:
      - frontend
      - backend
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # User Service
  user-service:
    build:
      context: .
      dockerfile: ./cmd/user/Dockerfile
    container_name: nebengjek-user-service
    ports:
      - "9995:9995"  # HTTP API
      - "9997:9997"  # WebSocket
    environment:
      - DB_HOST=postgres
      - DB_USER=postgres
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_NAME=nebengjek_user
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NATS_URL=nats://nats:4222
      - JWT_SECRET=${JWT_SECRET:-nebengjek_secret_key}
      - JWT_EXPIRY=24h
      - API_KEY=${API_KEY:-nebengjek_api_key}
      - LOG_LEVEL=info
      - PORT=9995
      - WS_PORT=9997
    volumes:
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
      - nats
    networks:
      - backend
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9995/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Location Service
  location-service:
    build:
      context: .
      dockerfile: ./cmd/location/Dockerfile
    container_name: nebengjek-location-service
    ports:
      - "9998:9998"
    environment:
      - DB_HOST=postgres
      - DB_USER=postgres
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_NAME=nebengjek_location
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NATS_URL=nats://nats:4222
      - API_KEY=${API_KEY:-nebengjek_api_key}
      - LOG_LEVEL=info
      - PORT=9998
    volumes:
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
      - nats
    networks:
      - backend
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9998/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Match Service
  match-service:
    build:
      context: .
      dockerfile: ./cmd/match/Dockerfile
    container_name: nebengjek-match-service
    ports:
      - "10000:10000"
    environment:
      - DB_HOST=postgres
      - DB_USER=postgres
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_NAME=nebengjek_match
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NATS_URL=nats://nats:4222
      - API_KEY=${API_KEY:-nebengjek_api_key}
      - LOG_LEVEL=info
      - PORT=10000
      - MATCH_RADIUS=5000  # Match radius in meters
      - MATCH_TIMEOUT=30   # Match timeout in seconds
    volumes:
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
      - nats
    networks:
      - backend
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:10000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Rides Service
  rides-service:
    build:
      context: .
      dockerfile: ./cmd/rides/Dockerfile
    container_name: nebengjek-rides-service
    ports:
      - "10002:10002"
    environment:
      - DB_HOST=postgres
      - DB_USER=postgres
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_NAME=nebengjek_rides
      - NATS_URL=nats://nats:4222
      - API_KEY=${API_KEY:-nebengjek_api_key}
      - LOG_LEVEL=info
      - PORT=10002
      - FARE_RATE=3000       # Rate in IDR per km
      - ADMIN_FEE_PERCENT=5  # Admin fee percentage
    volumes:
      - ./logs:/app/logs
    depends_on:
      - postgres
      - nats
    networks:
      - backend
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:10002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # PostgreSQL - Main Database
  postgres:
    image: postgis/postgis:15-3.3
    container_name: nebengjek-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_USER=postgres
      - POSTGRES_DB=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/migrations:/docker-entrypoint-initdb.d
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: 
      - "postgres"
      - "-c"
      - "max_connections=200"
      - "-c"
      - "shared_buffers=256MB"
      - "-c"
      - "effective_cache_size=1GB"
      - "-c"
      - "work_mem=16MB"
      - "-c"
      - "maintenance_work_mem=128MB"
      - "-c"
      - "random_page_cost=1.1"
      - "-c"
      - "temp_file_limit=10GB"
      - "-c"
      - "log_min_duration_statement=200ms"
      - "-c"
      - "idle_in_transaction_session_timeout=10s"
      - "-c"
      - "lock_timeout=1s"
      - "-c"
      - "statement_timeout=60s"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"
      - "-c"
      - "pg_stat_statements.max=10000"
      - "-c"
      - "pg_stat_statements.track=all"

  # Redis - For caching and geo-spatial indexing
  redis:
    image: redis:7.0-alpine
    container_name: nebengjek-redis
    ports:
      - "6379:6379"
    volumes:
      - ./infrastructure/redis.conf:/usr/local/etc/redis/redis.conf:ro
      - redis_data:/data
    networks:
      - backend
    restart: unless-stopped
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # NATS - Message broker for service communications
  nats:
    image: nats:2.9-alpine
    container_name: nebengjek-nats
    ports:
      - "4222:4222"  # Client connections
      - "8222:8222"  # HTTP monitoring
    volumes:
      - ./infrastructure/nats-config.conf:/etc/nats/nats-config.conf:ro
      - nats_data:/data
    networks:
      - backend
    restart: unless-stopped
    command: ["-c", "/etc/nats/nats-config.conf"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8222/varz"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Prometheus - Monitoring
  prometheus:
    image: prom/prometheus:v2.42.0
    container_name: nebengjek-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - monitoring
      - backend
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

  # Grafana - Visualization for monitoring
  grafana:
    image: grafana/grafana:9.4.7
    container_name: nebengjek-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/grafana/provisioning:/etc/grafana/provisioning
      - ./infrastructure/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - monitoring
    restart: unless-stopped
    depends_on:
      - prometheus

volumes:
  postgres_data:
  redis_data:
  nats_data:
  prometheus_data:
  grafana_data:

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
  monitoring:
    driver: bridge